{{!Stats section}}
<div class="mb-12">
  <div class="flex justify-between items-center mb-6">
    <h2 class="text-2xl font-semibold">Resource Utilization</h2>
    <div class="flex items-center space-x-2">
      <label for="partition-select" class="text-sm">Partition:</label>
      <select id="partition-select" class="border rounded p-2 w-[180px]">
        {{#each partitions}}
          <option value="{{this.id}}">{{this.name}}</option>
        {{/each}}
      </select>
    </div>
  </div>

  <div id="partition-badge" class="mb-4 hidden">
    <span class="bg-gray-200 text-gray-700 rounded-full px-3 py-1 text-sm inline-flex items-center">
      Showing stats for: <span id="selected-partition-name" class="font-semibold ml-1"></span>
    </span>
  </div>

  <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
    <div class="bg-white rounded-lg shadow border flex flex-col">
      <div class="pb-2 border-b p-4">
        <h3 class="text-lg font-medium">CPU Utilization</h3>
      </div>
      <div class="flex-1 flex items-center justify-center p-4">
        <div id="sunburst-chart-cpu" class="h-full mx-auto"></div>
      </div>
    </div>

    <div class="bg-white rounded-lg shadow border flex flex-col">
      <div class="pb-2 border-b p-4">
        <h3 class="text-lg font-medium">Memory Utilization</h3>
      </div>
      <div class="flex-1 flex items-center justify-center p-4">
        <div id="sunburst-chart-mem" class="h-full mx-auto"></div>
      </div>
    </div>

    <div class="bg-white rounded-lg shadow border flex flex-col">
      <div class="pb-2 border-b p-4">
        <h3 class="text-lg font-medium">GPU Utilization</h3>
      </div>
      <div class="flex-1 flex items-center justify-center p-4">
        <div id="sunburst-chart-gpu" class="h-full mx-auto"></div>
      </div>
    </div>
  </div>
</div>
<!-- Filter Form and rest of the existing code -->

<h2 class="text-center text-gray-800 mb-6 text-2xl">Slurm Job Queue</h2>

<!-- Filter Form -->
<div class="mb-4">
  <form id="filter-form" class="flex space-x-2">
    <select id="filter-field" class="border rounded p-2">
      <option value="jobid">JobID</option>
      <option value="partition">Partition</option>
      <option value="name">Name</option>
      <option value="user">User</option>
      <option value="state">State</option>
      <option value="statereason">State Reason</option>
    </select>
    <input type="text" id="filter-value" placeholder="Filter value" class="border rounded p-2" />
    <button type="submit" class="bg-blue-500 text-white rounded p-2">Add Filter</button>
    <button type="button" id="save-filter-btn" class="bg-green-500 text-white rounded p-2">Save</button>
  </form>
</div>

<!-- Active Filters Badges -->
<div id="active-filters" class="mb-4 flex flex-wrap gap-2"></div>

<!-- Jobs Table Container -->
{{> jobsTable}}



<script>
  // ----- D3 js Sunburts chart logic -----
 // Helper function to draw a sunburst chart in a given container.
  function drawSunburstChart(data, containerId, titleText, totalSuffix) {
    document.getElementById(containerId).innerHTML = '';
    const width = 500;
    const radius = width / 2;
    // Prepare a color scale based on the number of children.
    let color;
    if (containerId === "sunburst-chart-gpu") {
      // For GPU chart - use semantic colors based on usage state
      color = d => {
        // Special case for zero GPUs - use allocated color to indicate "no available GPUs"
        if (d.data.name === "No GPUs") {
          return "#e63946"; // Red color for "no available GPUs"
        }
        // Special case for errors - use a distinct error color
        if (d.data.name === "Error") {
          return "#8b5cf6"; // Purple color for errors
        }
        // First level: Used vs Available
        if (d.depth === 1) {
          return d.data.name === "Used" ? "#e63946" : "#2a9d8f"; // Red for used, Green for available
        } 
        // Second level: Different GPU types get different shades based on parent
        else if (d.depth === 2) {
          const parentName = d.parent.data.name;
          if (parentName === "Used") {
            // Different shades of red/orange for used GPUs
            const usedColors = ["#e63946", "#f94144", "#f3722c", "#f8961e", "#f9844a"];
            return usedColors[d.parent.children.indexOf(d) % usedColors.length];
          } else {
            // Different shades of green/blue for available GPUs
            const availableColors = ["#2a9d8f", "#52b788", "#76c893", "#99d98c", "#b5e48c"];
            return availableColors[d.parent.children.indexOf(d) % availableColors.length];
          }
        }
        return "#888888"; // Fallback gray color
      };
    } else {
      // For other charts (CPU, Memory) - use the original rainbow scheme
      color = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, data.children.length + 1));
    }
    
    // Partition layout: convert data into a hierarchy with computed angles.
    const partition = d => d3.partition()
      .size([2 * Math.PI, radius])
      (d3.hierarchy(data)
        .sum(d => d.value)
        .sort((a, b) => b.value - a.value));

    const arc = d3.arc()
      .startAngle(d => d.x0)
      .endAngle(d => d.x1)
      .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))
      .padRadius(radius / 2)
      .innerRadius(d => d.y0)
      .outerRadius(d => d.y1 - 1);

    const root = partition(data);

    // Create the SVG container.
    const svg = d3.create("svg")
      .attr("viewBox", [-radius, -radius, width, width]).style("height", "400px")
      .style("font", "10px sans-serif");

    // For GPU charts, use totalGPUs if available, otherwise use the sum of values
    let total = root.value;
    if (containerId === "sunburst-chart-gpu" && data.totalGPUs !== undefined) {
      total = data.totalGPUs;
    }
    
    // Add central label.
    svg.append("text")
      .attr("text-anchor", "middle")
      .attr("dy", "0.35em")
      .style("font-size", "16px")
      .style("font-weight", "bold")
      .text(titleText + " Total: " + Math.round(total) + (totalSuffix ? " " + totalSuffix : ""));

    // Draw arcs.
    svg.append("g")
      .attr("fill-opacity", 0.6)
      .selectAll("path")
      .data(root.descendants().filter(d => d.depth))
      .join("path")
      .attr("fill", d => {
          if (containerId === "sunburst-chart-gpu") {
          return color(d);
      } else {
          let current = d;
          while (current.depth > 1) current = current.parent;
          return color(current.data.name);
      }
      })
      .attr("d", arc)
      .append("title")
      .text(d => `${d.ancestors().map(d => d.data.name).reverse().join("/")}\n${d3.format(",d")(d.value)}`);

    // Add labels to arcs if space permits.
    svg.append("g")
      .attr("pointer-events", "none")
      .attr("text-anchor", "middle")
      .attr("font-size", 10)
      .attr("font-family", "sans-serif")
      .selectAll("text")
      .data(root.descendants().filter(d => d.depth && ((d.y0 + d.y1) / 2 * (d.x1 - d.x0)) > 10))
      .join("text")
      .attr("transform", d => {
          const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;
          const y = (d.y0 + d.y1) / 2;
          return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;
      })
      .attr("dy", "0.35em")
      .text(d => d.data.name);

    // Append the SVG into the target container.
    document.getElementById(containerId).appendChild(svg.node());
  }

  // Data for CPU sunburst chart (provided by your CPU stats function).
  var cpuData = {
    name: "CPU Utilization",
    children: [
      { name: "Allocated", value: {{cpuStats.allocated}} },
      { name: "Idle", value: {{cpuStats.idle}} },
      { name: "Other", value: {{cpuStats.other}} }
    ]
  };

  // Data for Memory sunburst chart (provided by your memory stats function).
  // Note: Your memStats object includes "allocated", "idle", "down", "other", and "total"
  var memData = {
    name: "Memory Utilization",
    children: [
      { name: "Allocated", value: {{memStats.allocated}} },
      { name: "Idle", value: {{memStats.idle}} },
      { name: "Down", value: {{memStats.down}} },
      { name: "Other", value: {{memStats.other}} }
    ]
  };


  // Render both charts.
  drawSunburstChart(cpuData, "sunburst-chart-cpu", "CPU");
  drawSunburstChart(memData, "sunburst-chart-mem", "Memory", "GB");
  drawSunburstChart({{{json gpuStats}}}, "sunburst-chart-gpu", "GPU");

  function updateChartsForPartition(partition) {
    const baseUrl = "{{passengerBaseUri}}".replace(/\/$/, '');
    const partitionBadge = document.getElementById('partition-badge');
    const selectedPartitionName = document.getElementById('selected-partition-name');
    
    // Show/hide partition badge
    if (partition === 'all') {
      partitionBadge.classList.add('hidden');
    } else {
      // Find the partition name from the select element
      const partitionSelect = document.getElementById('partition-select');
      const selectedOption = partitionSelect.options[partitionSelect.selectedIndex];
      selectedPartitionName.textContent = selectedOption.text;
      partitionBadge.classList.remove('hidden');
    }
    
    // Fetch stats for the selected partition
    fetch(`${baseUrl}/api/stats?partition=${partition}`)
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Create updated chart data
          const newCpuData = {
            name: "CPU Utilization",
            children: [
              { name: "Allocated", value: data.cpuStats.allocated },
              { name: "Idle", value: data.cpuStats.idle },
              { name: "Other", value: data.cpuStats.other }
            ]
          };
          
          const newMemData = {
            name: "Memory Utilization",
            children: [
              { name: "Allocated", value: data.memStats.allocated },
              { name: "Idle", value: data.memStats.idle },
              { name: "Down", value: data.memStats.down },
              { name: "Other", value: data.memStats.other }
            ]
          };
          
          // Redraw charts with new data
          drawSunburstChart(newCpuData, "sunburst-chart-cpu", "CPU");
          drawSunburstChart(newMemData, "sunburst-chart-mem", "Memory", "GB");
          drawSunburstChart(data.gpuStats, "sunburst-chart-gpu", "GPU");
        } else {
          console.error("Error fetching stats:", data.error);
        }
      })
      .catch(err => {
        console.error("Error updating stats:", err);
      });
  }

  // Listen for partition selection changes
  document.getElementById('partition-select').addEventListener('change', function() {
    updateChartsForPartition(this.value);
  });


  // ----- jobs filtering logic -----
  // Get current query parameters as an object
  function getQueryParams() {
    const params = {};
    const searchParams = new URLSearchParams(window.location.search);
    for (const [key, value] of searchParams.entries()) {
      // Convert page and pageSize to numbers
      if (key === 'page' || key === 'pageSize') {
        params[key] = parseInt(value);
      } else {
        params[key] = value;
      }
    }
    return params;
  }

  // Update the URL query parameters without reloading the page
  function updateURL(params) {
    const url = new URL(window.location);
    url.search = new URLSearchParams(params).toString();
    window.history.pushState({}, '', url);
  }

  // Render the active filters as badges
  function renderFilters(params) {
    const container = document.getElementById('active-filters');
    container.innerHTML = '';

    //avoid these
    const reservedParams = ['page', 'pageSize']

    for (const key in params) {
      if(reservedParams.includes(key)) continue;

      const badge = document.createElement('span');
      badge.className = "bg-gray-300 text-gray-700 rounded-full px-3 py-1 text-sm flex items-center";
      badge.innerHTML = `${key}: ${params[key]} <button data-key="${key}" class="ml-2 text-red-500 font-bold">x</button>`;
      container.appendChild(badge);
    }
  }

  function fetchJobs(params) {
    const queryString = new URLSearchParams(params).toString();
    console.log("Fetching jobs table with query string: ", queryString);
    const baseUrl = "{{passengerBaseUri}}".replace(/\/$/, '');
    const container = document.getElementById('jobs-table');

    // Fetch the rendered HTML from partials endpoint and then replace the html in browser heree
    fetch(`${baseUrl}/partials/jobs-table?${queryString}`)
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.text(); // expected HTML here
      })
      .then(html => {
        container.outerHTML = html; // replace the container itself

        // re-attach event listeners
        const newContainer = document.getElementById('jobs-table');
        if (newContainer) {
          attachClientSidePagination(newContainer);
          attachPageSizeSelector(newContainer);
        }
      })
      .catch(err => {
        console.error('Error fetching jobs table:', err);
        container.innerHTML = `<p class="text-red-500">Error fetching job data: ${err.message}</p>`;
      });
  }

  // Initialize active filters from the URL
  let activeFilters = getQueryParams();
  renderFilters(activeFilters);

  // Attach listeners to static elements on the page
  document.getElementById('filter-form').addEventListener('submit', function (e) {
    e.preventDefault();
    const fieldSelect = document.getElementById('filter-field');
    const filterField = fieldSelect.value;
    const filterValue = document.getElementById('filter-value').value.trim();
    if (filterValue) {
      activeFilters[filterField] = filterValue;
      // Reset to page 1 for a new filter
      activeFilters.page = 1;
      renderFilters(activeFilters);
      updateURL(activeFilters);
    }
    document.getElementById('filter-value').value = '';
  });

  document.getElementById('active-filters').addEventListener('click', function (e) {
    if (e.target.tagName.toLowerCase() === 'button') {
      const key = e.target.getAttribute('data-key');
      delete activeFilters[key];
      // Reset to page 1 when a filter is removed
      activeFilters.page = 1;
      renderFilters(activeFilters);
      updateURL(activeFilters);
      fetchJobs(activeFilters); // Fetch immediately on removal
    }
  });

  document.getElementById('save-filter-btn').addEventListener('click', function () {
    console.log("Clicked save, fetching with filters:", activeFilters);
    fetchJobs(activeFilters);
  });
  
  function attachClientSidePagination(container) {
    // Change the server-rendered links to client-side fetches
    container.querySelectorAll('a.pagination-link').forEach(link => {
      link.addEventListener('click', function(e) {
        e.preventDefault(); // Prevent full page reload
        const url = new URL(this.href);
        const page = url.searchParams.get('page');
        if (page) {
          activeFilters.page = parseInt(page);
          updateURL(activeFilters);
          fetchJobs(activeFilters);
        }
      });
    });
  }

  function attachPageSizeSelector(container) {
    const pageSizeSelector = container.querySelector('#page-size-select');
    if (pageSizeSelector) {
      pageSizeSelector.addEventListener('change', function() {
        const newPageSize = parseInt(this.value);
        activeFilters.pageSize = newPageSize;
        activeFilters.page = 1; // Reset to page 1
        updateURL(activeFilters);
        fetchJobs(activeFilters);
      });
    }
  }
  
  // Initial attachment of listeners for the server-rendered table
  const initialJobsTable = document.getElementById('jobs-table');
  if(initialJobsTable) {
    attachClientSidePagination(initialJobsTable);
    attachPageSizeSelector(initialJobsTable);
  }


function handleExpandClick(e) {
  const button = e.target.closest('.expand-btn');
  if (!button) return;

  const mainRow = button.closest('.job-row');
  const jobState = mainRow.dataset.jobState;
  const jobId = button.dataset.jobId;
  const detailsRow = document.getElementById(`details-row-${jobId}`);
  const icon = button.querySelector('svg');
  const isExpanded = button.getAttribute('aria-expanded') === 'true';
  

  //expand
  button.setAttribute('aria-expanded', button.getAttribute('aria-expanded') !== 'true');
  detailsRow.classList.toggle('hidden');
  icon.classList.toggle('rotate-90');

  //if job state is completed the fetch and show seff data
  if (jobState === 'COMPLETED' && !isExpanded) {
    const reportContainer = detailsRow.querySelector('.seff-report-container');
    if (reportContainer && !reportContainer.dataset.loaded) {
      // Mark it as "loading has started" immediately
      reportContainer.dataset.loaded = 'true'; 
      fetchAndDisplaySeffReport(jobId, reportContainer);
    }
  }
}

function fetchAndDisplaySeffReport(jobId, container) {
    // Show a loading state
    container.innerHTML = `
        <hr class="my-4 border-slate-200">
        <div class="p-4 flex items-center justify-center text-sm text-slate-500">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-slate-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Loading Efficiency Report...
        </div>
    `;

    // fetch partial from the server endpoint
    const baseUrl = "{{passengerBaseUri}}".replace(/\/$/, '');
    fetch(`${baseUrl}/partials/seff-report/${jobId}`)
        .then(response => {
            // The server will send a 200 OK for a success partial
            // and a 404 Not Found for an error partial. We just need the text.
            return response.text();
        })
        .then(html => {
            // 3. Inject the final HTML (which could be the report or the error message).
            container.innerHTML = html;
        })
        .catch(err => {
            console.error('Failed to fetch seff report:', err);
            container.innerHTML = `
                <hr class="my-4 border-slate-200">
                <div class="p-4 text-red-600">
                    A network error occurred while fetching the report. Please check your connection.
                </div>
            `;
        });
}

document.addEventListener('click', handleExpandClick);
</script>