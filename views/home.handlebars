<div class="flex w-full space-x-4 mb-20">
  <div class="w-1/2">
    <h2 class="text-2xl mb-4">CPU Utilization</h2>
    <div id="sunburst-chart-cpu" class="mb-6 max-h-64 max-w-80"></div>
  </div>
  <div class="w-1/2">
    <h2 class="text-2xl mb-4">Memory Utilization</h2>
    <div id="sunburst-chart-mem" class="mb-6 max-h-64 max-w-80"></div>
  </div>
</div>


<h2 class="text-center text-gray-800 mb-6 text-2xl">Slurm Job Queue</h2>

<!-- Filter Form -->
<div class="mb-4">
  <form id="filter-form" class="flex space-x-2">
    <select id="filter-field" class="border rounded p-2">
      <option value="jobid">JobID</option>
      <option value="partition">Partition</option>
      <option value="name">Name</option>
      <option value="user">User</option>
      <option value="state">State</option>
    </select>
    <input type="text" id="filter-value" placeholder="Filter value" class="border rounded p-2" />
    <button type="submit" class="bg-blue-500 text-white rounded p-2">Add Filter</button>
    <button type="button" id="save-filter-btn" class="bg-green-500 text-white rounded p-2">Save</button>
  </form>
</div>

<!-- Active Filters Badges -->
<div id="active-filters" class="mb-4 flex flex-wrap gap-2"></div>

<!-- Jobs Table Container -->
<div id="jobs-table">
  {{{jobsTable}}}
</div>

<script>
  // ----- D3 js Sunburts chart logic -----
 // Helper function to draw a sunburst chart in a given container.
  function drawSunburstChart(data, containerId, titleText, totalSuffix) {
    const width = 500;
    const radius = width / 2;
    // Prepare a color scale based on the number of children.
    const color = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, data.children.length + 1));
    
    // Partition layout: convert data into a hierarchy with computed angles.
    const partition = d => d3.partition()
      .size([2 * Math.PI, radius])
      (d3.hierarchy(data)
        .sum(d => d.value)
        .sort((a, b) => b.value - a.value));

    const arc = d3.arc()
      .startAngle(d => d.x0)
      .endAngle(d => d.x1)
      .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))
      .padRadius(radius / 2)
      .innerRadius(d => d.y0)
      .outerRadius(d => d.y1 - 1);

    const root = partition(data);

    // Create the SVG container.
    const svg = d3.create("svg")
      .attr("viewBox", [-radius, -radius, width, width])
      .style("font", "10px sans-serif");

    const total = root.value;
    // Add central label.
    svg.append("text")
      .attr("text-anchor", "middle")
      .attr("dy", "0.35em")
      .style("font-size", "16px")
      .style("font-weight", "bold")
      .text(titleText + " Total: " + total + (totalSuffix ? " " + totalSuffix : ""));

    // Draw arcs.
    svg.append("g")
      .attr("fill-opacity", 0.6)
      .selectAll("path")
      .data(root.descendants().filter(d => d.depth))
      .join("path")
      .attr("fill", d => {
          let current = d;
          while (current.depth > 1) current = current.parent;
          return color(current.data.name);
      })
      .attr("d", arc)
      .append("title")
      .text(d => `${d.ancestors().map(d => d.data.name).reverse().join("/")}\n${d3.format(",d")(d.value)}`);

    // Add labels to arcs if space permits.
    svg.append("g")
      .attr("pointer-events", "none")
      .attr("text-anchor", "middle")
      .attr("font-size", 10)
      .attr("font-family", "sans-serif")
      .selectAll("text")
      .data(root.descendants().filter(d => d.depth && ((d.y0 + d.y1) / 2 * (d.x1 - d.x0)) > 10))
      .join("text")
      .attr("transform", d => {
          const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;
          const y = (d.y0 + d.y1) / 2;
          return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;
      })
      .attr("dy", "0.35em")
      .text(d => d.data.name);

    // Append the SVG into the target container.
    document.getElementById(containerId).appendChild(svg.node());
  }

  // Data for CPU sunburst chart (provided by your CPU stats function).
  var cpuData = {
    name: "CPU Utilization",
    children: [
      { name: "Allocated", value: {{cpuStats.allocated}} },
      { name: "Idle", value: {{cpuStats.idle}} },
      { name: "Other", value: {{cpuStats.other}} }
    ]
  };

  // Data for Memory sunburst chart (provided by your memory stats function).
  // Note: Your memStats object includes "allocated", "idle", "down", "other", and "total"
  var memData = {
    name: "Memory Utilization",
    children: [
      { name: "Allocated", value: {{memStats.allocated}} },
      { name: "Idle", value: {{memStats.idle}} },
      { name: "Down", value: {{memStats.down}} },
      { name: "Other", value: {{memStats.other}} }
    ]
  };

  // Render both charts.
  drawSunburstChart(cpuData, "sunburst-chart-cpu", "CPU");
  drawSunburstChart(memData, "sunburst-chart-mem", "Memory", "GB");

  // ----- jobs filtering logic -----
  // Get current query parameters as an object
  function getQueryParams() {
    const params = {};
    const searchParams = new URLSearchParams(window.location.search);
    for (const [key, value] of searchParams.entries()) {
      params[key] = value;
    }
    return params;
  }

  // Update the URL query parameters without reloading the page
  function updateURL(params) {
    const url = new URL(window.location);
    url.search = new URLSearchParams(params).toString();
    window.history.pushState({}, '', url);
  }

  // Render the active filters as badges
  function renderFilters(params) {
    const container = document.getElementById('active-filters');
    container.innerHTML = '';
    for (const key in params) {
      const badge = document.createElement('span');
      badge.className = "bg-gray-300 text-gray-700 rounded-full px-3 py-1 text-sm flex items-center";
      badge.innerHTML = `${key}: ${params[key]} <button data-key="${key}" class="ml-2 text-red-500 font-bold">x</button>`;
      container.appendChild(badge);
    }
  }

  // Fetch and update the jobs table based on active filters
  function fetchJobs(params) {
    const queryString = new URLSearchParams(params).toString();
    console.log("fetching jobs with query string: ", queryString)
    const baseUrl = "{{passengerBaseUri}}".replace(/\/$/, '');
    fetch(baseUrl + '/api/jobs?' + queryString)
      .then(response => response.text())
      .then(html => {
        console.log("fetched jobs")
        document.getElementById('jobs-table').innerHTML = html;
      })
      .catch(err => console.error('Error fetching jobs:', err));
  }

  // Initialize active filters from the URL
  let activeFilters = getQueryParams();
  renderFilters(activeFilters);

  // When the form is submitted, add the new filter
  document.getElementById('filter-form').addEventListener('submit', function (e) {
    e.preventDefault();
    const fieldSelect = document.getElementById('filter-field');
    const filterField = fieldSelect.value;
    const filterValue = document.getElementById('filter-value').value.trim();
    if (filterValue) {
      activeFilters[filterField] = filterValue;
      renderFilters(activeFilters);
      updateURL(activeFilters);
    }
    document.getElementById('filter-value').value = '';
  });

  // Remove a filter when its badge "x" is clicked
  document.getElementById('active-filters').addEventListener('click', function (e) {
    if (e.target.tagName.toLowerCase() === 'button') {
      const key = e.target.getAttribute('data-key');
      delete activeFilters[key];
      renderFilters(activeFilters);
      updateURL(activeFilters);
      fetchJobs(activeFilters);
    }
  });

  // When the Save button is hit, update the jobs table view
  document.getElementById('save-filter-btn').addEventListener('click', function () {
    console.log("clicked save")
    fetchJobs(activeFilters);
  });
</script>