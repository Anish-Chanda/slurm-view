<div class="flex w-full space-x-4 mb-20">
  <div class="w-1/2">
    <h2 class="text-2xl mb-4">CPU Utilization</h2>
    <div id="sunburst-chart-cpu" class="mb-6 max-h-64 max-w-80"></div>
  </div>
  <div class="w-1/2">
    <h2 class="text-2xl mb-4">Memory Utilization</h2>
    <div id="sunburst-chart-mem" class="mb-6 max-h-64 max-w-80"></div>
  </div>
</div>


<h2 class="text-center text-gray-800 mb-6 text-2xl">Slurm Job Queue</h2>

<!-- Filter Form -->
<div class="mb-4">
  <form id="filter-form" class="flex space-x-2">
    <select id="filter-field" class="border rounded p-2">
      <option value="jobid">JobID</option>
      <option value="partition">Partition</option>
      <option value="name">Name</option>
      <option value="user">User</option>
      <option value="state">State</option>
    </select>
    <input type="text" id="filter-value" placeholder="Filter value" class="border rounded p-2" />
    <button type="submit" class="bg-blue-500 text-white rounded p-2">Add Filter</button>
    <button type="button" id="save-filter-btn" class="bg-green-500 text-white rounded p-2">Save</button>
  </form>
</div>

<!-- Active Filters Badges -->
<div id="active-filters" class="mb-4 flex flex-wrap gap-2"></div>

<!-- Jobs Table Container -->
<div id="jobs-table" class="overflow-x-auto">
  {{#if hasError}}
    <p class="text-red-500">Error retrieving job data: {{errorMessage}}</p>
  {{else}}
    {{#if jobs.length}}
      <table class="w-full border-collapse">
        <thead>
          <tr class="bg-gray-100">
            <th class="bg-red-600 text-white px-4 py-3 text-left border border-gray-200">JobID</th>
            <th class="bg-red-600 text-white px-4 py-3 text-left border border-gray-200">Partition</th>
            <th class="bg-red-600 text-white px-4 py-3 text-left border border-gray-200">Name</th>
            <th class="bg-red-600 text-white px-4 py-3 text-left border border-gray-200">User</th>
            <th class="bg-red-600 text-white px-4 py-3 text-left border border-gray-200">State</th>
            <th class="bg-red-600 text-white px-4 py-3 text-left border border-gray-200">Time Limit</th>
            <th class="bg-red-600 text-white px-4 py-3 text-left border border-gray-200">Nodes</th>
          </tr>
        </thead>
        <tbody>
          {{#each jobs}}
            <tr class="even:bg-gray-50 hover:bg-gray-100">
              <td class="px-4 py-3 text-left border border-gray-200">{{this.job_id}}</td>
              <td class="px-4 py-3 text-left border border-gray-200">{{this.partition}}</td>
              <td class="px-4 py-3 text-left border border-gray-200">{{this.name}}</td>
              <td class="px-4 py-3 text-left border border-gray-200">{{this.user_name}}</td>
              <td class="px-4 py-3 text-left border border-gray-200">{{this.job_state}}</td>
              <td class="px-4 py-3 text-left border border-gray-200">{{#if this.time_limit}}{{this.time_limit.number}}{{else}}N/A{{/if}}</td>
              <td class="px-4 py-3 text-left border border-gray-200">{{#if this.node_count}}{{this.node_count.number}}{{else}}N/A{{/if}}</td>
            </tr>
          {{/each}}
        </tbody>
      </table>

      <!-- Add page size selector with dropdown -->
      <div class="flex justify-between items-center mt-4 mb-2">
        <div class="flex items-center">
          <label for="page-size-select" class="mr-2 text-gray-600">Jobs per page:</label>
          <select id="page-size-select" class="border rounded p-1 text-sm">
            <option value="10" {{#if (eq pagination.pageSize 10)}}selected{{/if}}>10</option>
            <option value="20" {{#if (eq pagination.pageSize 20)}}selected{{/if}}>20</option>
            <option value="50" {{#if (eq pagination.pageSize 50)}}selected{{/if}}>50</option>
            <option value="100" {{#if (eq pagination.pageSize 100)}}selected{{/if}}>100</option>
          </select>
        </div>
      </div>

      <!-- Add pagination controls for server-rendered view -->
      {{#if pagination}}
        <div class="flex justify-between items-center mt-4">
          <div>
            <span class="text-gray-600">
              Showing {{add (multiply (subtract pagination.page 1) pagination.pageSize) 1}} to {{min (multiply pagination.page pagination.pageSize) pagination.totalItems}} of {{pagination.totalItems}} jobs
            </span>
          </div>
          <div class="flex space-x-2">
            <!-- Previous page button -->
            {{#if (gt pagination.page 1)}}
              <a href="?page={{subtract pagination.page 1}}{{#each ../activeFilters}}&{{@key}}={{this}}{{/each}}" class="bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium py-2 px-4 rounded">Previous</a>
            {{else}}
              <button class="bg-gray-100 text-gray-400 font-medium py-2 px-4 rounded cursor-not-allowed" disabled>Previous</button>
            {{/if}}
            
            <!-- Page number buttons -->
            {{#each (paginationRange pagination.page pagination.totalPages)}}
              {{#if (eq this ../pagination.page)}}
                <button class="bg-blue-500 text-white font-medium py-2 px-4 rounded" disabled>{{this}}</button>
              {{else}}
                <a href="?page={{this}}{{#each ../../activeFilters}}&{{@key}}={{this}}{{/each}}" class="bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium py-2 px-4 rounded">{{this}}</a>
              {{/if}}
            {{/each}}
            
            <!-- Next page button -->
            {{#if (lt pagination.page pagination.totalPages)}}
              <a href="?page={{add pagination.page 1}}{{#each ../activeFilters}}&{{@key}}={{this}}{{/each}}" class="bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium py-2 px-4 rounded">Next</a>
            {{else}}
              <button class="bg-gray-100 text-gray-400 font-medium py-2 px-4 rounded cursor-not-allowed" disabled>Next</button>
            {{/if}}
          </div>
        </div>
      {{/if}}
    {{else}}
      <p class="text-gray-500">No jobs match the current filters.</p>
    {{/if}}
  {{/if}}
</div>



<script>
  // ----- D3 js Sunburts chart logic -----
 // Helper function to draw a sunburst chart in a given container.
  function drawSunburstChart(data, containerId, titleText, totalSuffix) {
    const width = 500;
    const radius = width / 2;
    // Prepare a color scale based on the number of children.
    const color = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, data.children.length + 1));
    
    // Partition layout: convert data into a hierarchy with computed angles.
    const partition = d => d3.partition()
      .size([2 * Math.PI, radius])
      (d3.hierarchy(data)
        .sum(d => d.value)
        .sort((a, b) => b.value - a.value));

    const arc = d3.arc()
      .startAngle(d => d.x0)
      .endAngle(d => d.x1)
      .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))
      .padRadius(radius / 2)
      .innerRadius(d => d.y0)
      .outerRadius(d => d.y1 - 1);

    const root = partition(data);

    // Create the SVG container.
    const svg = d3.create("svg")
      .attr("viewBox", [-radius, -radius, width, width])
      .style("font", "10px sans-serif");

    const total = root.value;
    // Add central label.
    svg.append("text")
      .attr("text-anchor", "middle")
      .attr("dy", "0.35em")
      .style("font-size", "16px")
      .style("font-weight", "bold")
      .text(titleText + " Total: " + total + (totalSuffix ? " " + totalSuffix : ""));

    // Draw arcs.
    svg.append("g")
      .attr("fill-opacity", 0.6)
      .selectAll("path")
      .data(root.descendants().filter(d => d.depth))
      .join("path")
      .attr("fill", d => {
          let current = d;
          while (current.depth > 1) current = current.parent;
          return color(current.data.name);
      })
      .attr("d", arc)
      .append("title")
      .text(d => `${d.ancestors().map(d => d.data.name).reverse().join("/")}\n${d3.format(",d")(d.value)}`);

    // Add labels to arcs if space permits.
    svg.append("g")
      .attr("pointer-events", "none")
      .attr("text-anchor", "middle")
      .attr("font-size", 10)
      .attr("font-family", "sans-serif")
      .selectAll("text")
      .data(root.descendants().filter(d => d.depth && ((d.y0 + d.y1) / 2 * (d.x1 - d.x0)) > 10))
      .join("text")
      .attr("transform", d => {
          const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;
          const y = (d.y0 + d.y1) / 2;
          return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;
      })
      .attr("dy", "0.35em")
      .text(d => d.data.name);

    // Append the SVG into the target container.
    document.getElementById(containerId).appendChild(svg.node());
  }

  // Data for CPU sunburst chart (provided by your CPU stats function).
  var cpuData = {
    name: "CPU Utilization",
    children: [
      { name: "Allocated", value: {{cpuStats.allocated}} },
      { name: "Idle", value: {{cpuStats.idle}} },
      { name: "Other", value: {{cpuStats.other}} }
    ]
  };

  // Data for Memory sunburst chart (provided by your memory stats function).
  // Note: Your memStats object includes "allocated", "idle", "down", "other", and "total"
  var memData = {
    name: "Memory Utilization",
    children: [
      { name: "Allocated", value: {{memStats.allocated}} },
      { name: "Idle", value: {{memStats.idle}} },
      { name: "Down", value: {{memStats.down}} },
      { name: "Other", value: {{memStats.other}} }
    ]
  };

  // Render both charts.
  drawSunburstChart(cpuData, "sunburst-chart-cpu", "CPU");
  drawSunburstChart(memData, "sunburst-chart-mem", "Memory", "GB");

  // ----- jobs filtering logic -----
  // Get current query parameters as an object
  function getQueryParams() {
    const params = {};
    const searchParams = new URLSearchParams(window.location.search);
    for (const [key, value] of searchParams.entries()) {
      // Convert page and pageSize to numbers
      if (key === 'page' || key === 'pageSize') {
        params[key] = parseInt(value);
      } else {
        params[key] = value;
      }
    }
    return params;
  }

  // Update the URL query parameters without reloading the page
  function updateURL(params) {
    const url = new URL(window.location);
    url.search = new URLSearchParams(params).toString();
    window.history.pushState({}, '', url);
  }

  // Render the active filters as badges
  function renderFilters(params) {
    const container = document.getElementById('active-filters');
    container.innerHTML = '';

    //avoid these
    const reservedParams = ['page', 'pageSize']

    for (const key in params) {
      if(reservedParams.includes(key)) continue;

      const badge = document.createElement('span');
      badge.className = "bg-gray-300 text-gray-700 rounded-full px-3 py-1 text-sm flex items-center";
      badge.innerHTML = `${key}: ${params[key]} <button data-key="${key}" class="ml-2 text-red-500 font-bold">x</button>`;
      container.appendChild(badge);
    }
  }

  // Fetch and update the jobs table based on active filters
// Update the fetchJobs function to properly handle JSON response
function fetchJobs(params, page = 1, pageSize = {{defaultPageSize}}) {
  const queryParams = { ...params, page, pageSize };
  const queryString = new URLSearchParams(queryParams).toString();
  console.log("fetching jobs with query string: ", queryString)
  const baseUrl = "{{passengerBaseUri}}".replace(/\/$/, '');

  fetch(baseUrl + '/api/jobs?' + queryString)
    .then(response => response.json())
    .then(data => {
      console.log("fetched jobs data:", data);
      
      // Render the table with the received job data
      const container = document.getElementById('jobs-table');
      
      if (!data.success) {
        container.innerHTML = `<p class="text-red-500">Error retrieving job data: ${data.error}</p>`;
        return;
      }
      
      const jobs = data.jobs;
      const pagination = data.pagination;
      
      if (!jobs || jobs.length === 0) {
        container.innerHTML = '<p class="text-gray-500">No jobs match the current filters.</p>';
        return;
      }
      
      let html = `
        <table class="w-full border-collapse">
          <thead>
            <tr class="bg-gray-100">
              <th class="bg-red-600 text-white px-4 py-3 text-left border border-gray-200">JobID</th>
              <th class="bg-red-600 text-white px-4 py-3 text-left border border-gray-200">Partition</th>
              <th class="bg-red-600 text-white px-4 py-3 text-left border border-gray-200">Name</th>
              <th class="bg-red-600 text-white px-4 py-3 text-left border border-gray-200">User</th>
              <th class="bg-red-600 text-white px-4 py-3 text-left border border-gray-200">State</th>
              <th class="bg-red-600 text-white px-4 py-3 text-left border border-gray-200">Time Limit</th>
              <th class="bg-red-600 text-white px-4 py-3 text-left border border-gray-200">Nodes</th>
            </tr>
          </thead>
          <tbody>
      `;
      
      for (const job of jobs) {
        html += `
          <tr class="even:bg-gray-50 hover:bg-gray-100">
            <td class="px-4 py-3 text-left border border-gray-200">${job.job_id || 'N/A'}</td>
            <td class="px-4 py-3 text-left border border-gray-200">${job.partition || 'N/A'}</td>
            <td class="px-4 py-3 text-left border border-gray-200">${job.name || 'N/A'}</td>
            <td class="px-4 py-3 text-left border border-gray-200">${job.user_name || 'N/A'}</td>
            <td class="px-4 py-3 text-left border border-gray-200">${job.job_state || 'N/A'}</td>
            <td class="px-4 py-3 text-left border border-gray-200">${job.time_limit ? job.time_limit.number : 'N/A'}</td>
            <td class="px-4 py-3 text-left border border-gray-200">${job.node_count ? job.node_count.number : 'N/A'}</td>
          </tr>
        `;
      }
      
      html += `
          </tbody>
        </table>
      `;

      html += `
      <!-- Page size selector -->
      <div class="flex justify-between items-center mt-4 mb-2">
        <div class="flex items-center">
          <label for="page-size-select" class="mr-2 text-gray-600">Jobs per page:</label>
          <select id="page-size-select" class="border rounded p-1 text-sm">
            <option value="10" ${pagination.pageSize === 10 ? 'selected' : ''}>10</option>
            <option value="20" ${pagination.pageSize === 20 ? 'selected' : ''}>20</option>
            <option value="50" ${pagination.pageSize === 50 ? 'selected' : ''}>50</option>
            <option value="100" ${pagination.pageSize === 100 ? 'selected' : ''}>100</option>
          </select>
        </div>
      </div>

      <!-- Pagination navigation -->
      <div class="flex justify-between items-center mt-2">
        <div>
          <span class="text-gray-600">Showing ${(pagination.page - 1) * pagination.pageSize + 1} to ${Math.min(pagination.page * pagination.pageSize, pagination.totalItems)} of ${pagination.totalItems} jobs</span>
        </div>
        <div class="flex space-x-2">
    `;

      // Add pagination controls
      html += `
        <div class="flex justify-between items-center mt-4">
          <div>
            <span class="text-gray-600">Showing ${(pagination.page - 1) * pagination.pageSize + 1} to ${Math.min(pagination.page * pagination.pageSize, pagination.totalItems)} of ${pagination.totalItems} jobs</span>
          </div>
          <div class="flex space-x-2">
      `;
      
      // Previous page button
      if (pagination.page > 1) {
        html += `<button class="pagination-btn bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium py-2 px-4 rounded" data-page="${pagination.page - 1}">Previous</button>`;
      } else {
        html += `<button class="bg-gray-100 text-gray-400 font-medium py-2 px-4 rounded cursor-not-allowed" disabled>Previous</button>`;
      }

      // Page number buttons (show up to 5 pages)
      const startPage = Math.max(1, pagination.page - 2);
      const endPage = Math.min(pagination.totalPages, pagination.page + 2);
      
      for (let i = startPage; i <= endPage; i++) {
        if (i === pagination.page) {
          html += `<button class="bg-blue-500 text-white font-medium py-2 px-4 rounded" disabled>${i}</button>`;
        } else {
          html += `<button class="pagination-btn bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium py-2 px-4 rounded" data-page="${i}">${i}</button>`;
        }
      }
      
      // Next page button
      if (pagination.page < pagination.totalPages) {
        html += `<button class="pagination-btn bg-gray-200 hover:bg-gray-300 text-gray-700 font-medium py-2 px-4 rounded" data-page="${pagination.page + 1}">Next</button>`;
      } else {
        html += `<button class="bg-gray-100 text-gray-400 font-medium py-2 px-4 rounded cursor-not-allowed" disabled>Next</button>`;
      }
      
      html += `
          </div>
        </div>
      `;
      
      container.innerHTML = html;

      attachEventListeners();
    })
    .catch(err => {
      console.error('Error fetching jobs:', err);
      document.getElementById('jobs-table').innerHTML = `<p class="text-red-500">Error fetching job data: ${err.message}</p>`;
    });
}
  // Initialize active filters from the URL
  let activeFilters = getQueryParams();
  renderFilters(activeFilters);
  attachEventListeners();

  // the following event listeners are attached to DOM that doesnt undergo re-rendering
  // When the form is submitted, add the new filter
  document.getElementById('filter-form').addEventListener('submit', function (e) {
    e.preventDefault();
    const fieldSelect = document.getElementById('filter-field');
    const filterField = fieldSelect.value;
    const filterValue = document.getElementById('filter-value').value.trim();
    if (filterValue) {
      activeFilters[filterField] = filterValue;
      renderFilters(activeFilters);
      updateURL(activeFilters);
    }
    document.getElementById('filter-value').value = '';
  });

  // Remove a filter when its badge "x" is clicked
  document.getElementById('active-filters').addEventListener('click', function (e) {
    if (e.target.tagName.toLowerCase() === 'button') {
      const key = e.target.getAttribute('data-key');
      delete activeFilters[key];
      renderFilters(activeFilters);
      updateURL(activeFilters);
      fetchJobs(activeFilters);
    }
  });

  // When the Save button is hit, update the jobs table view
  document.getElementById('save-filter-btn').addEventListener('click', function () {
    console.log("clicked save")
    fetchJobs(activeFilters);
  });

// Create a function to attach event listeners after DOM updates
function attachEventListeners() {
  // Add event listeners for pagination buttons
  document.querySelectorAll('.pagination-btn').forEach(button => {
    button.addEventListener('click', function() {
      const page = parseInt(this.getAttribute('data-page'));
      // Update URL with new page parameter
      activeFilters.page = page;
      updateURL(activeFilters);
      fetchJobs(activeFilters, page, activeFilters.pageSize || {{defaultPageSize}});
    });
  });

  // Add event listener for page size selector
  const pageSizeSelector = document.getElementById('page-size-select');
  if (pageSizeSelector) {
    pageSizeSelector.addEventListener('change', function() {
      const newPageSize = parseInt(this.value);
      // Reset to page 1 when changing page size to avoid empty pages
      activeFilters.pageSize = newPageSize;
      activeFilters.page = 1;
      updateURL(activeFilters);
      fetchJobs(activeFilters, 1, newPageSize);
    });
  }
}
</script>